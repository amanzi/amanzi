# builds ATS, failing if tests do not pass
#
# Note this should not be
# used in CI -- it is more for creating containers for short courses,
# etc, where the container is manually pushed, as opposed to CI which
# first pushes the container and then runs tests.
#
# Note, the branch arguments are:
# - if a branch name is passed, it will be checked out and forced to the
#   tip of that branch on origin
# - if the branch name is empty, the default submodule hash will be used
#
# The former is preferred in development, but the latter should be
# done to confirm that the submodule will work for users

ARG amanzi_tpls_ver=latest
ARG mpi_flavor=mpich
ARG amanzi_branch=master
ARG ats_branch=
ARG ats_tests_branch=
ARG https_proxy=
ARG http_proxy=

FROM metsi/amanzi-tpls:${amanzi_tpls_ver}-${mpi_flavor}
# Set the default shell to Bash
SHELL ["/bin/bash", "-c"]

LABEL Description="ATS CI: Build ATS in a Docker image."

# Switch to amanzi_user and set up env
USER amanzi_user
ENV https_proxy=$https_proxy \
    http_proxy=$http_proxy

RUN echo "${AMANZI_PREFIX}"
RUN echo "${AMANZI_TPLS_DIR}"

# Install Miniconda
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /home/amanzi_user/miniconda3 && \
    rm ~/miniconda.sh

# Add conda to path
ENV PATH="/home/amanzi_user/miniconda3/bin:${PATH}"

# Initialize Conda and create environment
RUN /bin/bash -c "source /home/amanzi_user/miniconda3/etc/profile.d/conda.sh && conda create -n ideas_env python=3.8 -y"

# Install packages into the environment
# RUN conda run -n ideas_env conda install -y -c conda-forge numpy scipy matplotlib h5py colorcet geopandas pyvista ipywidgets shapely vtk pyproj netcdf4 jupyter ipykernel
RUN conda run -n ideas_env conda install -y -c conda-forge \
    numpy scipy matplotlib h5py colorcet geopandas pyvista \
    ipywidgets shapely vtk pyproj netcdf4 jupyter ipykernel \
    cmocean imageio imageio-ffmpeg meshio trame trame-vtk \
    trame-vuetify trimesh sqlite xvfbwrapper

# Initialize conda in .bashrc
RUN conda init bash && \
    echo "conda activate ideas_env" >> ~/.bashrc

# Change the Working Directory and update amanzi
WORKDIR /home/amanzi_user/amanzi

# # Make sure we have updated branch information
# RUN echo "Amanzi branch = $amanzi_branch"
# RUN git remote prune origin
# RUN git fetch

# # Checkout the local branch and forcibly move it to the origin's
# # version of that branch.  Do not git pull because that can author
# # commits (and therefore fail) if a merge is required to do the pull
# # (if the local branch already exists and diverges from the remote
# # branch)
# RUN if [ -n "$amanzi_branch" ] ; then git checkout $amanzi_branch; git reset --hard origin/$amanzi_branch; fi
# RUN git rev-parse --short HEAD

# # Checkout ATS at the right branch
# RUN git submodule update --init
# WORKDIR /home/amanzi_user/amanzi/src/physics/ats
# RUN if [ -n "$ats_branch" ] ; then git fetch; git checkout $ats_branch; git reset --hard origin/$ats_branch; fi
# RUN git rev-parse --short HEAD

# # Checkout ats-regression-tests at the right branch
# RUN git submodule update --init 
# WORKDIR /home/amanzi_user/amanzi/src/physics/ats/testing/ats-regression-tests
# RUN if [ -n "$ats_tests_branch" ] ; then git fetch; git checkout $ats_tests_branch; git reset --hard origin/$ats_tests_branch; fi
# RUN git rev-parse --short HEAD
# WORKDIR /home/amanzi_user/amanzi

# ENV AMANZI_SRC_DIR=/home/amanzi_user/amanzi \
#     ATS_SRC_DIR=/home/amanzi_user/amanzi/src/physics/ats 
  
# RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
#    --amanzi-build-dir=/home/amanzi_user/amanzi_builddir/ats \
#    --tpl-config-file=${AMANZI_TPLS_DIR}/share/cmake/amanzi-tpl-config.cmake \
#    --parallel=4 \
#    --opt \
#    --with-mpi=/usr \
#    --enable-shared \
#    --disable-structured \
#    --disable-build_user_guide \
#    --enable-geochemistry \
#    --disable-amanzi_physics \
#    --enable-ats_physics \
#    --ats_dev \
#    --disable-reg_tests \
#    --disable-test_suite

# Set path to make it easier to run amanzi
ENV PATH=/home/amanzi_user/install/bin:${PATH}
RUN echo $PATH

# Create mount point for work on the host
RUN mkdir /home/amanzi_user/work
WORKDIR /home/amanzi_user

# Unset proxy
ENV https_proxy= \
    http_proxy=
