#  -*- mode: cmake -*-

#
# Build TPL:  Silo
#    
# --- Define all the directories and common external project flags
if (NOT ENABLE_XSDK)
  define_external_project_args(Silo TARGET silo
                               DEPENDS HDF5 BUILD_IN_SOURCE)
else()
  define_external_project_args(Silo TARGET silo
                               DEPENDS XSDK BUILD_IN_SOURCE)
endif()

# add Silo version to the autogenerated tpl_versions.h file
amanzi_tpl_version_write(FILENAME ${TPL_VERSIONS_INCLUDE_FILE}
  PREFIX Silo
  VERSION ${Silo_VERSION_MAJOR} ${Silo_VERSION_MINOR} ${Silo_VERSION_PATCH})
  

# --- Define configure parameters

# Use the common cflags, cxxflags
include(BuildWhitespaceString)
build_whitespace_string(silo_cflags
                       ${Amanzi_COMMON_CFLAGS})

build_whitespace_string(silo_cxxflags
                       ${Amanzi_COMMON_CXXFLAGS})
set(cpp_flag_list 
    ${Amanzi_COMMON_CFLAGS}
    ${Amanzi_COMMON_CXXFLAGS})
list(REMOVE_DUPLICATES cpp_flag_list)
build_whitespace_string(silo_cppflags ${cpp_flags_list})


build_whitespace_string(silo_fcflags
                       ${Amanzi_COMMON_FCFLAGS})

# Silo install directory
set(silo_install_dir ${TPL_INSTALL_PREFIX})

# Silo shared libraries
if (BUILD_SHARED_LIBS)
    set(CONFIG_SILO_SHARED --enable-shared --disable-static)
else()
    set(CONFIG_SILO_SHARED --disable-shared --enable-static)
endif()

# Force executables to built with all static libs.
if ((DEFINED ENV{NERSC_HOST}) AND (NOT BUILD_SHARED_LIBS))
    set(LIBTOOL_STATIC "LIBTOOL_STATIC=-all-static")
else()
    set(LIBTOOL_STATIC "")
endif()

# Silo CMAKE_BUILD_TYPE=(Debug|Release)i
if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
   set(CONFIG_SILO_DEBUG --disable-optimization)
else()
   set(CONFIG_SILO_DEBUG --enable-optimization)
endif()

# --- Set the name of the patch 
set(Silo_patch_file silo-4.10.2-remove-mpiposix.patch
                    silo-4.10.2-debug-builds.patch
                    silo-4.10.2-static-tools.patch
                    silo-4.10.2-nouppercase.patch)

set(Silo_sh_patch ${Silo_prefix_dir}/silo-patch-step.sh)
configure_file(${SuperBuild_TEMPLATE_FILES_DIR}/silo-patch-step.sh.in
               ${Silo_sh_patch}
               @ONLY)
# --- Configure the CMake patch step
set(Silo_cmake_patch ${Silo_prefix_dir}/silo-patch-step.cmake)
configure_file(${SuperBuild_TEMPLATE_FILES_DIR}/silo-patch-step.cmake.in
               ${Silo_cmake_patch}
               @ONLY)
# --- Set the patch command
set(Silo_PATCH_COMMAND ${CMAKE_COMMAND} -P ${Silo_cmake_patch})

# --- Add external project build 
ExternalProject_Add(${Silo_BUILD_TARGET}
                    DEPENDS   ${Silo_PACKAGE_DEPENDS}      # Package dependency target
                    TMP_DIR   ${Silo_tmp_dir}              # Temporary files directory
                    STAMP_DIR ${Silo_stamp_dir}            # Timestamp and log directory
                    # -- Download and URL definitions
                    DOWNLOAD_DIR  ${TPL_DOWNLOAD_DIR}      
                    URL           ${Silo_URL}              # URL may be a web site OR a local file
                    URL_MD5       ${Silo_MD5_SUM}          # md5sum of the archive file
                    # -- Patch 
                    PATCH_COMMAND ${Silo_PATCH_COMMAND}
                    # -- Configure
                    SOURCE_DIR    ${Silo_source_dir}       # Source directory
                    CONFIGURE_COMMAND
                              ${Silo_source_dir}/configure
                                          --prefix=${silo_install_dir}
                                          --with-x=0
                                          --with-hdf5=${HDF5_DIR}/include,${HDF5_DIR}/lib
                                          --enable-fortran=0
                                          ${CONFIG_SILO_SHARED}
                                          ${CONFIG_SILO_DEBUG}
                                          FC=${CMAKE_Fortran_COMPILER}
                                          CC=${CMAKE_C_COMPILER}
                                          CXX=${CMAKE_CXX_COMPILER}
                                          CFLAGS=${silo_cflags}
                                          CXXFLAGS=${silo_cxxflags}
                      LIBS=-ldl ${LIBTOOL_STATIC}
                    # -- Build
                    BINARY_DIR        ${Silo_build_dir}           # Build directory 
                    BUILD_COMMAND     $(MAKE) -j 1 SILO_DIR=${Silo_source_dir} # Run the CMake script to build
                    BUILD_IN_SOURCE   ${Silo_BUILD_IN_SOURCE}     # Flag for in source builds
                    # -- Install
                    INSTALL_DIR       ${silo_install_dir}  # Install directory, NOT in the usual directory
                    INSTALL_COMMAND   $(MAKE) install SILO_DIR=${Silo_source_dir} # Install directory, NOT in the usual directory
                    # -- Output control
                    ${Silo_logging_args})

# --- Useful variables for other packages that depend on Silo
set(Silo_DIR ${silo_install_dir})
