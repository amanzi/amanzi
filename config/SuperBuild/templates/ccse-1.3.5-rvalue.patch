diff -ruNbB ccse-1.3.5-source/Src/C_AMRLib/AmrLevel.cpp ccse-1.3.5-rvalue/Src/C_AMRLib/AmrLevel.cpp
--- ccse-1.3.5-source/Src/C_AMRLib/AmrLevel.cpp	2016-02-18 19:15:45.000000000 -0700
+++ ccse-1.3.5-rvalue/Src/C_AMRLib/AmrLevel.cpp	2020-05-02 21:54:43.000000000 -0600
@@ -1469,13 +1469,22 @@
 			       dlo,dhi,dom_lo,dom_hi,dx,xlo,&time,&dt,bcr,
 			       &level,&grid_no);
 	    } else if (rec->derFunc3D() != static_cast<DeriveFunc3D>(0)){
-		rec->derFunc3D()(ddat,ARLIM_3D(dlo),ARLIM_3D(dhi),&n_der,
-				 cdat,ARLIM_3D(clo),ARLIM_3D(chi),&n_state,
-				 ARLIM_3D(dlo),ARLIM_3D(dhi),
-				 ARLIM_3D(dom_lo),ARLIM_3D(dom_hi),
-				 ZFILL(dx),ZFILL(xlo),
+                int dlo_tmp[3] = ARLIM_3D(dlo);
+                int dhi_tmp[3] = ARLIM_3D(dhi);
+                int clo_tmp[3] = ARLIM_3D(clo);
+                int chi_tmp[3] = ARLIM_3D(chi);
+                int dom_lo_tmp[3] = ARLIM_3D(dom_lo);
+                int dom_hi_tmp[3] = ARLIM_3D(dom_hi);
+                Real dx_tmp[3] = ZFILL(dx);
+                Real xlo_tmp[3] = ZFILL(xlo);
+                int bcr_tmp[6] = BCREC_3D(bcr);
+		rec->derFunc3D()(ddat,dlo_tmp,dhi_tmp,&n_der,
+				 cdat,clo_tmp,chi_tmp,&n_state,
+				 dlo_tmp,dhi_tmp,
+				 dom_lo_tmp,dom_hi_tmp,
+				 dx_tmp,xlo_tmp,
 				 &time,&dt,
-				 BCREC_3D(bcr),
+				 bcr_tmp,
 				 &level,&grid_no);
 	    } else {
 		BoxLib::Error("AmeLevel::derive: no function available");
@@ -1605,13 +1614,22 @@
 			       dlo,dhi,dom_lo,dom_hi,dx,xlo,&time,&dt,bcr,
 			       &level,&idx);
 	    } else if (rec->derFunc3D() != static_cast<DeriveFunc3D>(0)){
-		rec->derFunc3D()(ddat,ARLIM_3D(dlo),ARLIM_3D(dhi),&n_der,
-				 cdat,ARLIM_3D(clo),ARLIM_3D(chi),&n_state,
-				 ARLIM_3D(dlo),ARLIM_3D(dhi),
-				 ARLIM_3D(dom_lo),ARLIM_3D(dom_hi),
-				 ZFILL(dx),ZFILL(xlo),
+                int clo_tmp[3] = ARLIM_3D(clo);
+                int chi_tmp[3] = ARLIM_3D(chi);
+                int dlo_tmp[3] = ARLIM_3D(dlo);
+                int dhi_tmp[3] = ARLIM_3D(dhi);
+                int dom_lo_tmp[3] = ARLIM_3D(dom_lo);
+                int dom_hi_tmp[3] = ARLIM_3D(dom_hi);
+                Real dx_tmp[3] = ZFILL(dx);
+                Real xlo_tmp[3] = ZFILL(xlo);
+                int bcr_tmp[6] = BCREC_3D(bcr);
+		rec->derFunc3D()(ddat,dlo_tmp,dhi_tmp,&n_der,
+				 cdat,clo_tmp,chi_tmp,&n_state,
+				 dlo_tmp,dhi_tmp,
+				 dom_lo_tmp,dom_hi_tmp,
+				 dx_tmp,xlo_tmp,
 				 &time,&dt,
-				 BCREC_3D(bcr),
+				 bcr_tmp,
 				 &level,&idx);
 	    } else {
 		BoxLib::Error("AmeLevel::derive: no function available");
diff -ruNbB ccse-1.3.5-source/Src/C_AMRLib/ErrorList.cpp ccse-1.3.5-rvalue/Src/C_AMRLib/ErrorList.cpp
--- ccse-1.3.5-source/Src/C_AmrCoreLib/ErrorList.cpp	2016-02-18 19:15:45.000000000 -0700
+++ ccse-1.3.5-rvalue/Src/C_AmrCoreLib/ErrorList.cpp	2020-05-02 21:33:50.000000000 -0600
@@ -61,9 +61,20 @@
 {
     BL_ASSERT(m_func3D != 0);
 
-    m_func3D(tag,ARLIM_3D(tlo),ARLIM_3D(thi),
-             tagval,clearval,data,ARLIM_3D(dlo),ARLIM_3D(dhi),ARLIM_3D(lo),ARLIM_3D(hi),nvar,
-             ARLIM_3D(domain_lo),ARLIM_3D(domain_hi),ZFILL(dx),ZFILL(xlo),ZFILL(prob_lo),time,level);
+    int tlo_tmp[3] = ARLIM_3D(tlo);
+    int thi_tmp[3] = ARLIM_3D(thi);
+    int dlo_tmp[3] = ARLIM_3D(dlo);
+    int dhi_tmp[3] = ARLIM_3D(dhi);
+    int lo_tmp[3] = ARLIM_3D(lo);
+    int hi_tmp[3] = ARLIM_3D(hi);
+    int domain_lo_tmp[3] = ARLIM_3D(domain_lo);
+    int domain_hi_tmp[3] = ARLIM_3D(domain_hi);
+    Real dx_tmp[3] = ZFILL(dx);
+    Real xlo_tmp[3] = ZFILL(xlo);
+    Real prob_lo_tmp[3] = ZFILL(prob_lo);
+    m_func3D(tag,tlo_tmp,thi_tmp,
+             tagval,clearval,data,dlo_tmp,dhi_tmp,lo_tmp,hi_tmp,nvar,
+             domain_lo_tmp,domain_hi_tmp,dx_tmp,xlo_tmp,prob_lo_tmp,time,level);
 }  
 
 
diff -ruNbB ccse-1.3.5-source/Src/C_AMRLib/StateDescriptor.cpp ccse-1.3.5-rvalue/Src/C_AMRLib/StateDescriptor.cpp
--- ccse-1.3.5-source/Src/C_AMRLib/StateDescriptor.cpp	2016-02-18 19:15:45.000000000 -0700
+++ ccse-1.3.5-rvalue/Src/C_AMRLib/StateDescriptor.cpp	2020-05-02 21:47:50.000000000 -0600
@@ -81,18 +81,32 @@
 
     bool thread_safe = bf_thread_safety(lo, hi, dom_lo, dom_hi, bc, 1);
     if (thread_safe) {
-      if (m_func != 0)
+      if (m_func != 0) {
 	m_func(data,ARLIM(lo),ARLIM(hi),dom_lo,dom_hi,dx,grd_lo,time,bc);
-      else
-	m_func3D(data,ARLIM_3D(lo),ARLIM_3D(hi),ARLIM_3D(dom_lo),ARLIM_3D(dom_hi),ZFILL(dx),ZFILL(grd_lo),time,bc);
+      } else {
+        int lo_tmp[3] = ARLIM_3D(lo);
+        int hi_tmp[3] = ARLIM_3D(hi);
+        int dom_lo_tmp[3] = ARLIM_3D(dom_lo);
+        int dom_hi_tmp[3] = ARLIM_3D(dom_hi);
+        Real dx_tmp[3] = ZFILL(dx);
+        Real grd_lo_tmp[3] = ZFILL(grd_lo);
+	m_func3D(data,lo_tmp,hi_tmp,dom_lo_tmp,dom_hi_tmp,dx_tmp,grd_lo_tmp,time,bc);
+      }
     } else {
 #ifdef _OPENMP
 #pragma omp critical (bndryfunc)
 #endif
-      if (m_func != 0)
+      if (m_func != 0) {
 	m_func(data,ARLIM(lo),ARLIM(hi),dom_lo,dom_hi,dx,grd_lo,time,bc);
-      else
-	m_func3D(data,ARLIM_3D(lo),ARLIM_3D(hi),ARLIM_3D(dom_lo),ARLIM_3D(dom_hi),ZFILL(dx),ZFILL(grd_lo),time,bc);
+      } else {
+        int lo_tmp[3] = ARLIM_3D(lo);
+        int hi_tmp[3] = ARLIM_3D(hi);
+        int dom_lo_tmp[3] = ARLIM_3D(dom_lo);
+        int dom_hi_tmp[3] = ARLIM_3D(dom_hi);
+        Real dx_tmp[3] = ZFILL(dx);
+        Real grd_lo_tmp[3] = ZFILL(grd_lo);
+	m_func3D(data,lo_tmp,hi_tmp,dom_lo_tmp,dom_hi_tmp,dx_tmp,grd_lo_tmp,time,bc);
+      }
     }
 }
 
@@ -106,18 +120,32 @@
 
     bool thread_safe = bf_thread_safety(lo, hi, dom_lo, dom_hi, bc, ng);
     if (thread_safe) {
-        if (m_gfunc != 0)
+        if (m_gfunc != 0) {
 	  m_gfunc(data,ARLIM(lo),ARLIM(hi),dom_lo,dom_hi,dx,grd_lo,time,bc);
-	else
-	  m_gfunc3D(data,ARLIM_3D(lo),ARLIM_3D(hi),ARLIM_3D(dom_lo),ARLIM_3D(dom_hi),ZFILL(dx),ZFILL(grd_lo),time,bc);
+	} else {
+          int lo_tmp[3] = ARLIM_3D(lo);
+          int hi_tmp[3] = ARLIM_3D(hi);
+          int dom_lo_tmp[3] = ARLIM_3D(dom_lo);
+          int dom_hi_tmp[3] = ARLIM_3D(dom_hi);
+          Real dx_tmp[3] = ZFILL(dx);
+          Real grd_lo_tmp[3] = ZFILL(grd_lo);
+	  m_gfunc3D(data,lo_tmp,hi_tmp,dom_lo_tmp,dom_hi_tmp,dx_tmp,grd_lo_tmp,time,bc);
+        }
     } else {
 #ifdef _OPENMP
 #pragma omp critical (bndryfunc)
 #endif
-        if (m_gfunc != 0)
+        if (m_gfunc != 0) {
 	  m_gfunc(data,ARLIM(lo),ARLIM(hi),dom_lo,dom_hi,dx,grd_lo,time,bc);
-	else
-	  m_gfunc3D(data,ARLIM_3D(lo),ARLIM_3D(hi),ARLIM_3D(dom_lo),ARLIM_3D(dom_hi),ZFILL(dx),ZFILL(grd_lo),time,bc);
+	} else {
+          int lo_tmp[3] = ARLIM_3D(lo);
+          int hi_tmp[3] = ARLIM_3D(hi);
+          int dom_lo_tmp[3] = ARLIM_3D(dom_lo);
+          int dom_hi_tmp[3] = ARLIM_3D(dom_hi);
+          Real dx_tmp[3] = ZFILL(dx);
+          Real grd_lo_tmp[3] = ZFILL(grd_lo);
+	  m_gfunc3D(data,lo_tmp,hi_tmp,dom_lo_tmp,dom_hi_tmp,dx_tmp,grd_lo_tmp,time,bc);
+        }
     }
 }
 
diff -ruNbB ccse-1.3.5-source/Src/C_BaseLib/ArrayLim.H ccse-1.3.5-rvalue/Src/C_BaseLib/ArrayLim.H
--- ccse-1.3.5-source/Src/C_BaseLib/ArrayLim.H	2016-02-18 19:15:45.000000000 -0700
+++ ccse-1.3.5-rvalue/Src/C_BaseLib/ArrayLim.H	2020-05-02 21:17:21.000000000 -0600
@@ -26,9 +26,9 @@
 #elif   BL_SPACEDIM==2
 #define ARLIM_P(x)  const int&,const int&
 #define ARLIM(x)  x[0],x[1]
-#define ARLIM_3D(x) &((int []){x[0], x[1], 0}[0])
-#define ZFILL(x) &((Real []){x[0], x[1], 0.}[0])
-#define BCREC_3D(x) &((int []){x[0], x[1], 0, x[2], x[3], 0}[0])
+#define ARLIM_3D(x) {x[0], x[1], 0}
+#define ZFILL(x) {x[0], x[1], 0.}
+#define BCREC_3D(x) {x[0], x[1], 0, x[2], x[3], 0}
 #elif   BL_SPACEDIM==3
 #define ARLIM_P(x)  const int&,const int&,const int&
 #define ARLIM(x)  x[0],x[1],x[2]
--- BoxLib-16.10/Src/C_BaseLib/BaseFab.cpp	2016-10-03 09:54:09.000000000 -0600
+++ BoxLib-16.10-new/Src/C_BaseLib/BaseFab.cpp	2020-06-20 13:32:29.000000000 -0600
@@ -179,9 +179,16 @@
     BL_ASSERT(srccomp >= 0 && srccomp+numcomp <= src.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <= nComp());
 
-    fort_fab_copy(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-		  BL_TO_FORTRAN_N_3D(*this,destcomp),
-		  BL_TO_FORTRAN_N_3D(src,srccomp), ARLIM_3D(srcbox.loVect()),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int srcbox_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src_loVect_tmp[3] = ARLIM_3D(src.loVect());
+    int src_hiVect_tmp[3] = ARLIM_3D(src.hiVect());
+    fort_fab_copy(dest_loVect_tmp, dest_hiVect_tmp,
+                  (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
+                  src.dataPtr(srccomp), src_loVect_tmp, src_hiVect_tmp, srcbox_loVect_tmp,
 		  &numcomp);
 }
 
@@ -197,9 +204,13 @@
 
     if (srcbox.ok())
     {
-	fort_fab_copytomem(ARLIM_3D(srcbox.loVect()), ARLIM_3D(srcbox.hiVect()),
+        int src_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+        int src_hiVect_tmp[3] = ARLIM_3D(srcbox.hiVect());
+        int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+        int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+	fort_fab_copytomem(src_loVect_tmp, src_hiVect_tmp,
 			   dst,
-			   BL_TO_FORTRAN_N_3D(*this,srccomp),
+                           (*this).dataPtr(srccomp), this_loVect_tmp, this_hiVect_tmp,
 			   &numcomp);
     }
 }
@@ -216,8 +227,12 @@
 
     if (dstbox.ok()) 
     {
-	fort_fab_copyfrommem(ARLIM_3D(dstbox.loVect()), ARLIM_3D(dstbox.hiVect()),
-			     BL_TO_FORTRAN_N_3D(*this,dstcomp), &numcomp,
+        int dstbox_loVect_tmp[3] = ARLIM_3D(dstbox.loVect());
+        int dstbox_hiVect_tmp[3] = ARLIM_3D(dstbox.hiVect());
+        int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+        int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+	fort_fab_copyfrommem(dstbox_loVect_tmp, dstbox_hiVect_tmp,
+                             (*this).dataPtr(dstcomp), this_loVect_tmp, this_hiVect_tmp, &numcomp,
 			     src);
     }
 }
@@ -232,8 +247,12 @@
     BL_ASSERT(domain.contains(bx));
     BL_ASSERT(comp >= 0 && comp + ncomp <= nvar);
 
-    fort_fab_setval(ARLIM_3D(bx.loVect()), ARLIM_3D(bx.hiVect()),
-		    BL_TO_FORTRAN_N_3D(*this,comp), &ncomp,
+    int bx_loVect_tmp[3] = ARLIM_3D(bx.loVect());
+    int bx_hiVect_tmp[3] = ARLIM_3D(bx.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    fort_fab_setval(bx_loVect_tmp, bx_hiVect_tmp,
+                    (*this).dataPtr(comp), this_loVect_tmp, this_hiVect_tmp, &ncomp,
 		    &val);
 }
 
@@ -247,8 +266,12 @@
     BL_ASSERT(domain.contains(bx));
     BL_ASSERT(comp >= 0 && comp + ncomp <= nvar);
 
-    fort_fab_invert(ARLIM_3D(bx.loVect()), ARLIM_3D(bx.hiVect()),
-		    BL_TO_FORTRAN_N_3D(*this,comp), &ncomp,
+    int bx_loVect_tmp[3] = ARLIM_3D(bx.loVect());
+    int bx_hiVect_tmp[3] = ARLIM_3D(bx.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    fort_fab_invert(bx_loVect_tmp, bx_hiVect_tmp,
+                    (*this).dataPtr(comp), this_loVect_tmp, this_hiVect_tmp, &ncomp,
 		    &val);
     return *this;
 }
@@ -267,8 +290,12 @@
 
     if (p == 0 || p == 1)
     {
-	nrm = fort_fab_norm(ARLIM_3D(bx.loVect()), ARLIM_3D(bx.hiVect()),
-			    BL_TO_FORTRAN_N_3D(*this,comp), &ncomp,
+        int bx_loVect_tmp[3] = ARLIM_3D(bx.loVect());
+        int bx_hiVect_tmp[3] = ARLIM_3D(bx.hiVect());
+        int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+        int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+	nrm = fort_fab_norm(bx_loVect_tmp, bx_hiVect_tmp,
+                            (*this).dataPtr(comp), this_loVect_tmp, this_hiVect_tmp, &ncomp,
 			    &p);
     }
     else
@@ -288,8 +315,12 @@
     BL_ASSERT(domain.contains(bx));
     BL_ASSERT(comp >= 0 && comp + ncomp <= nvar);
 
-    return fort_fab_sum(ARLIM_3D(bx.loVect()), ARLIM_3D(bx.hiVect()),
-			BL_TO_FORTRAN_N_3D(*this,comp), &ncomp);
+    int bx_loVect_tmp[3] = ARLIM_3D(bx.loVect());
+    int bx_hiVect_tmp[3] = ARLIM_3D(bx.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    return fort_fab_sum(bx_loVect_tmp, bx_hiVect_tmp,
+                        (*this).dataPtr(comp), this_loVect_tmp, this_hiVect_tmp, &ncomp);
 }
 
 template<>
@@ -308,9 +339,16 @@
     BL_ASSERT(srccomp >= 0 && srccomp+numcomp <= src.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <= nComp());
 
-    fort_fab_plus(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-		  BL_TO_FORTRAN_N_3D(*this,destcomp),
-		  BL_TO_FORTRAN_N_3D(src,srccomp), ARLIM_3D(srcbox.loVect()),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src_loVect_tmp[3] = ARLIM_3D(src.loVect());
+    int src_hiVect_tmp[3] = ARLIM_3D(src.hiVect());
+    int srcbox_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+    fort_fab_plus(dest_loVect_tmp, dest_hiVect_tmp,
+                  (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
+                  src.dataPtr(srccomp), src_loVect_tmp, src_hiVect_tmp, srcbox_loVect_tmp,
 		  &numcomp);
 
     return *this;
@@ -332,9 +370,16 @@
     BL_ASSERT(srccomp >= 0 && srccomp+numcomp <= src.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <= nComp());
 
-    fort_fab_mult(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-		  BL_TO_FORTRAN_N_3D(*this,destcomp),
-		  BL_TO_FORTRAN_N_3D(src,srccomp), ARLIM_3D(srcbox.loVect()),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src_loVect_tmp[3] = ARLIM_3D(src.loVect());
+    int src_hiVect_tmp[3] = ARLIM_3D(src.hiVect());
+    int srcbox_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+    fort_fab_mult(dest_loVect_tmp, dest_hiVect_tmp,
+                  (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
+                  src.dataPtr(srccomp), src_loVect_tmp, src_hiVect_tmp, srcbox_loVect_tmp,
 		  &numcomp);
     return *this;
 }
@@ -356,10 +401,17 @@
     BL_ASSERT( srccomp >= 0 &&  srccomp+numcomp <= src.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <=     nComp());
 
-    fort_fab_saxpy(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-		   BL_TO_FORTRAN_N_3D(*this,destcomp),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src_loVect_tmp[3] = ARLIM_3D(src.loVect());
+    int src_hiVect_tmp[3] = ARLIM_3D(src.hiVect());
+    int srcbox_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+    fort_fab_saxpy(dest_loVect_tmp, dest_hiVect_tmp,
+                   (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
 		   &a,
-		   BL_TO_FORTRAN_N_3D(src,srccomp), ARLIM_3D(srcbox.loVect()),
+                   src.dataPtr(srccomp), src_loVect_tmp, src_hiVect_tmp, srcbox_loVect_tmp,
 		   &numcomp);
     return *this;
 }
@@ -381,10 +433,17 @@
     BL_ASSERT( srccomp >= 0 &&  srccomp+numcomp <= src.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <=     nComp());
 
-    fort_fab_xpay(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-		  BL_TO_FORTRAN_N_3D(*this,destcomp),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src_loVect_tmp[3] = ARLIM_3D(src.loVect());
+    int src_hiVect_tmp[3] = ARLIM_3D(src.hiVect());
+    int srcbox_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+    fort_fab_xpay(dest_loVect_tmp, dest_hiVect_tmp,
+                  (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
 		  &a,
-		  BL_TO_FORTRAN_N_3D(src,srccomp), ARLIM_3D(srcbox.loVect()),
+                  src.dataPtr(srccomp), src_loVect_tmp, src_hiVect_tmp, srcbox_loVect_tmp,
 		  &numcomp);
     return *this;
 }
@@ -405,10 +464,18 @@
     BL_ASSERT(   comp2 >= 0 &&    comp2+numcomp <= src2.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <=      nComp());
 
-    fort_fab_addproduct(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-			BL_TO_FORTRAN_N_3D(*this,destcomp),
-			BL_TO_FORTRAN_N_3D(src1,comp1),
-			BL_TO_FORTRAN_N_3D(src2,comp2),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src1_loVect_tmp[3] = ARLIM_3D(src1.loVect());
+    int src1_hiVect_tmp[3] = ARLIM_3D(src1.hiVect());
+    int src2_loVect_tmp[3] = ARLIM_3D(src2.loVect());
+    int src2_hiVect_tmp[3] = ARLIM_3D(src2.hiVect());
+    fort_fab_addproduct(dest_loVect_tmp, dest_hiVect_tmp,
+                        (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
+                        src1.dataPtr(comp1), src1_loVect_tmp, src1_hiVect_tmp,
+                        src2.dataPtr(comp2), src2_loVect_tmp, src2_hiVect_tmp,
 			&numcomp);
     return *this;
 }
@@ -429,9 +496,16 @@
     BL_ASSERT(srccomp >= 0 && srccomp+numcomp <= src.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <= nComp());
 
-    fort_fab_minus(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-		   BL_TO_FORTRAN_N_3D(*this,destcomp),
-		   BL_TO_FORTRAN_N_3D(src,srccomp), ARLIM_3D(srcbox.loVect()),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src_loVect_tmp[3] = ARLIM_3D(src.loVect());
+    int src_hiVect_tmp[3] = ARLIM_3D(src.hiVect());
+    int srcbox_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+    fort_fab_minus(dest_loVect_tmp, dest_hiVect_tmp,
+                   (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
+                   src.dataPtr(srccomp), src_loVect_tmp, src_hiVect_tmp, srcbox_loVect_tmp,
 		   &numcomp);
     return *this;
 }
@@ -452,9 +526,16 @@
     BL_ASSERT(srccomp >= 0 && srccomp+numcomp <= src.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <= nComp());
 
-    fort_fab_divide(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-		    BL_TO_FORTRAN_N_3D(*this,destcomp),
-		    BL_TO_FORTRAN_N_3D(src,srccomp), ARLIM_3D(srcbox.loVect()),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src_loVect_tmp[3] = ARLIM_3D(src.loVect());
+    int src_hiVect_tmp[3] = ARLIM_3D(src.hiVect());
+    int srcbox_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+    fort_fab_divide(dest_loVect_tmp, dest_hiVect_tmp,
+                    (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
+                    src.dataPtr(srccomp), src_loVect_tmp, src_hiVect_tmp, srcbox_loVect_tmp,
 		    &numcomp);
     return *this;
 }
@@ -475,9 +556,16 @@
     BL_ASSERT(srccomp >= 0 && srccomp+numcomp <= src.nComp());
     BL_ASSERT(destcomp >= 0 && destcomp+numcomp <= nComp());
 
-    fort_fab_protdivide(ARLIM_3D(destbox.loVect()), ARLIM_3D(destbox.hiVect()),
-			BL_TO_FORTRAN_N_3D(*this,destcomp),
-			BL_TO_FORTRAN_N_3D(src,srccomp), ARLIM_3D(srcbox.loVect()),
+    int dest_loVect_tmp[3] = ARLIM_3D(destbox.loVect());
+    int dest_hiVect_tmp[3] = ARLIM_3D(destbox.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int src_loVect_tmp[3] = ARLIM_3D(src.loVect());
+    int src_hiVect_tmp[3] = ARLIM_3D(src.hiVect());
+    int srcbox_loVect_tmp[3] = ARLIM_3D(srcbox.loVect());
+    fort_fab_protdivide(dest_loVect_tmp, dest_hiVect_tmp,
+                        (*this).dataPtr(destcomp), this_loVect_tmp, this_hiVect_tmp,
+                        src.dataPtr(srccomp), src_loVect_tmp, src_hiVect_tmp, srcbox_loVect_tmp,
 			&numcomp);
     return *this;
 }
@@ -508,10 +596,20 @@
     BL_ASSERT(comp2 >= 0 && comp2+numcomp <= f2.nComp());
     BL_ASSERT(comp  >= 0 && comp +numcomp <=    nComp());
 
-    fort_fab_lincomb(ARLIM_3D(b.loVect()), ARLIM_3D(b.hiVect()),
-		     BL_TO_FORTRAN_N_3D(*this,comp),
-		     &alpha, BL_TO_FORTRAN_N_3D(f1,comp1), ARLIM_3D(b1.loVect()),
-		     &beta,  BL_TO_FORTRAN_N_3D(f2,comp2), ARLIM_3D(b2.loVect()),
+    int b_loVect_tmp[3] = ARLIM_3D(b.loVect());
+    int b_hiVect_tmp[3] = ARLIM_3D(b.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int f1_loVect_tmp[3] = ARLIM_3D(f1.loVect());
+    int f1_hiVect_tmp[3] = ARLIM_3D(f1.hiVect());
+    int b1_loVect_tmp[3] = ARLIM_3D(b1.loVect());
+    int f2_loVect_tmp[3] = ARLIM_3D(f2.loVect());
+    int f2_hiVect_tmp[3] = ARLIM_3D(f2.hiVect());
+    int b2_loVect_tmp[3] = ARLIM_3D(b2.loVect());
+    fort_fab_lincomb(b_loVect_tmp, b_hiVect_tmp,
+                     (*this).dataPtr(comp), this_loVect_tmp, this_hiVect_tmp,
+		     &alpha, f1.dataPtr(comp1), f1_loVect_tmp, f1_hiVect_tmp, b1_loVect_tmp,
+		     &beta,  f2.dataPtr(comp2), f2_loVect_tmp, f2_hiVect_tmp, b2_loVect_tmp,
 		     &numcomp);
     return *this;
 }
@@ -529,9 +627,16 @@
     BL_ASSERT(xcomp >= 0 && xcomp+numcomp <=   nComp());
     BL_ASSERT(ycomp >= 0 && ycomp+numcomp <= y.nComp());
 
-    return fort_fab_dot(ARLIM_3D(xbx.loVect()), ARLIM_3D(xbx.hiVect()),
-			BL_TO_FORTRAN_N_3D(*this,xcomp),
-			BL_TO_FORTRAN_N_3D(y,ycomp), ARLIM_3D(ybx.loVect()),
+    int xbx_loVect_tmp[3] = ARLIM_3D(xbx.loVect());
+    int xbx_hiVect_tmp[3] = ARLIM_3D(xbx.hiVect());
+    int this_loVect_tmp[3] = ARLIM_3D((*this).loVect());
+    int this_hiVect_tmp[3] = ARLIM_3D((*this).hiVect());
+    int y_loVect_tmp[3] = ARLIM_3D(y.loVect());
+    int y_hiVect_tmp[3] = ARLIM_3D(y.hiVect());
+    int ybx_loVect_tmp[3] = ARLIM_3D(ybx.loVect());
+    return fort_fab_dot(xbx_loVect_tmp, xbx_hiVect_tmp,
+                        (*this).dataPtr(xcomp), this_loVect_tmp, this_hiVect_tmp,
+		        y.dataPtr(ycomp), y_loVect_tmp, y_hiVect_tmp, ybx_loVect_tmp,
 			&numcomp);
 }
 
--- BoxLib-16.10/Src/C_BaseLib/PhysBCFunct.cpp	2016-10-03 09:54:09.000000000 -0600
+++ BoxLib-16.10-new/Src/C_BaseLib/PhysBCFunct.cpp	2020-06-20 14:27:57.000000000 -0600
@@ -38,8 +38,14 @@
     if (m_func != 0) {
 	m_func(data,ARLIM(lo),ARLIM(hi),dom_lo,dom_hi,dx,grd_lo,time,bc);
     } else {
-	m_func3D(data,ARLIM_3D(lo),ARLIM_3D(hi),ARLIM_3D(dom_lo),ARLIM_3D(dom_hi),
-		 ZFILL(dx),ZFILL(grd_lo),time,bc);
+        int lo_tmp[3] = ARLIM_3D(lo);
+        int hi_tmp[3] = ARLIM_3D(hi);
+        int dom_lo_tmp[3] = ARLIM_3D(dom_lo);
+        int dom_hi_tmp[3] = ARLIM_3D(dom_hi);
+        Real dx_tmp[3] = ZFILL(dx);
+        Real grd_lo_tmp[3] = ZFILL(grd_lo);
+	m_func3D(data,lo_tmp,hi_tmp,dom_lo_tmp,dom_hi_tmp,
+		 dx_tmp,grd_lo_tmp,time,bc);
     }
 }
 
