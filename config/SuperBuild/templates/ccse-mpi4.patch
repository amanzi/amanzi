--- ../BoxLib-16.09/Src/C_BaseLib/ParallelDescriptor.cpp	2016-09-01 09:30:29.000000000 -0600
+++ ccse-16.09-source/Src/C_BaseLib/ParallelDescriptor.cpp	2020-06-21 12:17:38.000000000 -0600
@@ -22,10 +22,6 @@
                     int fcomma, int fcommc, int *fcomms,
                     int fgrpa, int fgrpc, int *fgrps,
                     int m_MyId_all, int m_MyId_comp, int m_MyId_sidecar);
-    void bl_fortran_set_nprocs_sidecar_to_zero(int m_nProcs_all,
-                    int fcomma, int fcommc,
-                    int fgrpa, int fgrpc,
-                    int m_MyId_all, int m_MyId_comp);
 }
 #endif
 
@@ -284,7 +280,7 @@
 
     // ---- find the maximum value for a tag
     int flag(0), *attrVal;
-    BL_MPI_REQUIRE( MPI_Attr_get(m_comm_all, MPI_TAG_UB, &attrVal, &flag) );
+    BL_MPI_REQUIRE( MPI_Comm_get_attr(m_comm_all, MPI_TAG_UB, &attrVal, &flag) );
     if(flag) {
       m_MaxTag_MPI = *attrVal;
       m_MaxTag = m_MaxTag_MPI - tagBuffer;  // ---- buffer for sidecar tags
@@ -328,12 +324,9 @@
     if(m_group_all != MPI_GROUP_NULL) {
       BL_MPI_REQUIRE( MPI_Group_free(&m_group_all) );
     }
-// bl_fortran_mpi_comm_free() has already freed the global communicator
-#ifndef BL_USE_FORTRAN_MPI
     if(m_comm_all != MPI_COMM_NULL) {
       BL_MPI_REQUIRE( MPI_Comm_free(&m_comm_all) );
     }
-#endif
 
     BL_MPI_REQUIRE( MPI_Finalize() );
 }
@@ -629,7 +622,7 @@
     }
 
 #ifdef BL_USE_FORTRAN_MPI
-    if(nSidecars > 0) {
+if(nSidecars > 0) {
       int fcomma = MPI_Comm_c2f(m_comm_all);
       int fcommc = MPI_Comm_c2f(m_comm_comp);
       Array<int> fcomms(nSidecars, -1);
@@ -647,14 +640,7 @@
                                     fcomma, fcommc, fcomms.dataPtr(),
                                     fgrpa, fgrpc, fgrps.dataPtr(),
                                     m_MyId_all, m_MyId_comp, m_MyId_sidecar);
-    } else {
-      int fcomma = MPI_Comm_c2f(m_comm_all);
-      int fcommc = MPI_Comm_c2f(m_comm_comp);
-      int fgrpa  = MPI_Group_c2f(m_group_all);
-      int fgrpc  = MPI_Group_c2f(m_group_comp);
-      bl_fortran_set_nprocs_sidecar_to_zero(m_nProcs_all, fcomma, fcommc, fgrpa, fgrpc,
-                                            m_MyId_all, m_MyId_comp);
-    }
+}
 #endif
 
     ParallelDescriptor::EndTeams();
@@ -2208,20 +2194,20 @@
     {
 	IntVect iv[2];	// Used to construct the data types
 	MPI_Datatype types[] = {
-	    MPI_LB,
 	    MPI_INT,
-	    MPI_UB};
+	    MPI_INT,
+	    MPI_INT};
 	int blocklens[] = { 1, BL_SPACEDIM, 1};
 	MPI_Aint disp[3];
 	int n = 0;
-	BL_MPI_REQUIRE( MPI_Address(&iv[0],      &disp[n++]) );
-	BL_MPI_REQUIRE( MPI_Address(&iv[0].vect, &disp[n++]) );
-	BL_MPI_REQUIRE( MPI_Address(&iv[1],      &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[0],      &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[0].vect, &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[1],      &disp[n++]) );
 	for ( int i = n-1; i >= 0; i-- )
 	{
 	    disp[i] -= disp[0];
 	}
-	BL_MPI_REQUIRE( MPI_Type_struct(n, blocklens, disp, types, &mine) );
+	BL_MPI_REQUIRE( MPI_Type_create_struct(n, blocklens, disp, types, &mine) );
 	BL_MPI_REQUIRE( MPI_Type_commit( &mine ) );
     }
     return mine;
@@ -2234,20 +2220,20 @@
     {
 	IndexType iv[2];	// Used to construct the data types
 	MPI_Datatype types[] = {
-	    MPI_LB,
+	    MPI_INT,
 	    MPI_UNSIGNED,
-	    MPI_UB};
+	    MPI_INT};
 	int blocklens[] = { 1, 1, 1};
 	MPI_Aint disp[3];
 	int n = 0;
-	BL_MPI_REQUIRE( MPI_Address(&iv[0],       &disp[n++]) );
-	BL_MPI_REQUIRE( MPI_Address(&iv[0].itype, &disp[n++]) );
-	BL_MPI_REQUIRE( MPI_Address(&iv[1],       &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[0],       &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[0].itype, &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[1],       &disp[n++]) );
 	for ( int i = n-1; i >= 0; i-- )
 	{
 	    disp[i] -= disp[0];
 	}
-	BL_MPI_REQUIRE( MPI_Type_struct(n, blocklens, disp, types, &mine) );
+	BL_MPI_REQUIRE( MPI_Type_create_struct(n, blocklens, disp, types, &mine) );
 	BL_MPI_REQUIRE( MPI_Type_commit( &mine ) );
     }
     return mine;
@@ -2260,24 +2246,24 @@
     {
 	Box iv[2];	// Used to construct the data types
 	MPI_Datatype types[] = {
-	    MPI_LB,
+	    MPI_INT,
 	    Mpi_typemap<IntVect>::type(),
 	    Mpi_typemap<IntVect>::type(),
 	    Mpi_typemap<IndexType>::type(),
-	    MPI_UB};
+	    MPI_INT};
 	int blocklens[] = { 1, 1, 1, 1, 1};
 	MPI_Aint disp[5];
 	int n = 0;
-	BL_MPI_REQUIRE( MPI_Address(&iv[0],          &disp[n++]) );
-	BL_MPI_REQUIRE( MPI_Address(&iv[0].smallend, &disp[n++]) );
-	BL_MPI_REQUIRE( MPI_Address(&iv[0].bigend,   &disp[n++]) );
-	BL_MPI_REQUIRE( MPI_Address(&iv[0].btype,    &disp[n++]) );
-	BL_MPI_REQUIRE( MPI_Address(&iv[1],          &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[0],          &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[0].smallend, &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[0].bigend,   &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[0].btype,    &disp[n++]) );
+	BL_MPI_REQUIRE( MPI_Get_address(&iv[1],          &disp[n++]) );
 	for ( int i = n-1; i >= 0; i-- )
 	{
 	    disp[i] -= disp[0];
 	}
-	BL_MPI_REQUIRE( MPI_Type_struct(n, blocklens, disp, types, &mine) );
+	BL_MPI_REQUIRE( MPI_Type_create_struct(n, blocklens, disp, types, &mine) );
 	BL_MPI_REQUIRE( MPI_Type_commit( &mine ) );
     }
     return mine;
