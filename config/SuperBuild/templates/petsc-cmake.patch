diff -ruNbB petsc-v3.13-old/config/PETSc/Configure.py petsc-v3.13-new/config/PETSc/Configure.py
--- petsc-v3.13-old/config/PETSc/Configure.py	2020-03-29 20:59:40.000000000 -0600
+++ petsc-v3.13-new/config/PETSc/Configure.py	2020-08-11 20:39:31.000000000 -0600
@@ -79,6 +79,7 @@
     self.blasLapack    = framework.require('config.packages.BlasLapack',self)
     self.mpi           = framework.require('config.packages.MPI',       self)
     self.fortran       = framework.require('config.compilersFortran',   self)
+    self.cmake         = framework.require('config.packages.cmake',     self)
     self.externalpackagesdir = framework.require('PETSc.options.externalpackagesdir',self)
 
     for utility in sorted(os.listdir(os.path.join('config','PETSc','options'))):
@@ -936,6 +937,7 @@
     self.Dump()
     self.dumpConfigInfo()
     self.dumpMachineInfo()
+    self.dumpCMakeConfig()
     # need to save the current state of BuildSystem so that postProcess() packages can read it in and perhaps run make install
     self.framework.storeSubstitutions(self.framework.argDB)
     self.framework.argDB['configureCache'] = pickle.dumps(self.framework)
@@ -946,3 +948,120 @@
     self.framework.log.write('================================================================================\n')
     self.logClear()
     return
+ 
+  def dumpCMakeConfig(self):
+    '''
+    Writes configuration-specific values to ${PETSC_ARCH}/lib/petsc/conf/PETScBuildInternal.cmake.
+    This file is private to PETSc and should not be included by third parties
+    (a suitable file can be produced later by CMake, but this is not it).
+    '''
+    def cmakeset(fd,key,val=True):
+      if val == True: val = 'YES'
+      if val == False: val = 'NO'
+      fd.write('set (' + key + ' ' + val + ')\n')
+    def ensurelist(a):
+      if isinstance(a,list):
+        return a
+      else:
+        return [a]
+    def libpath(lib):
+      'Returns a search path if that is what this item provides, else "" which will be cleaned out later'
+      if not isinstance(lib,str): return ''
+      if lib.startswith('-L'): return lib[2:]
+      if lib.startswith('-R'): return lib[2:]
+      if lib.startswith('-Wl,-rpath,'):
+        # This case occurs when an external package needs a specific system library that is normally provided by the compiler.
+        # In other words, the -L path is builtin to the wrapper or compiler, here we provide it so that CMake can locate the
+        # corresponding library.
+        return lib[len('-Wl,-rpath,'):]
+      if lib.startswith('-'): return ''
+      return os.path.dirname(lib)
+    def cleanlib(lib):
+      'Returns a library name if that is what this item provides, else "" which will be cleaned out later'
+      if not isinstance(lib,str): return ''
+      if lib.startswith('-l'):  return lib[2:]
+      if lib.startswith('-Wl') or lib.startswith('-L'): return ''
+      lib = os.path.splitext(os.path.basename(lib))[0]
+      if lib.startswith('lib'): return lib[3:]
+      return lib
+    def nub(lst):
+      'Return a list containing the first occurrence of each unique element'
+      unique = []
+      for elem in lst:
+        if elem not in unique and elem != '':
+          unique.append(elem)
+      return unique
+    def nublast(lst):
+      'Return a list containing the last occurrence of each unique entry in a list'
+      return reversed(nub(reversed(lst)))
+    def cmakeexpand(varname):
+      return r'"${' + varname + r'}"'
+    def uniqextend(lst,new):
+      for x in ensurelist(new):
+        if x not in lst:
+          lst.append(x)
+    def notstandardinclude(path):
+      return path not in '/usr/include'.split() # /usr/local/include is not automatically included on FreeBSD
+    def writeMacroDefinitions(fd):
+      if self.mpi.usingMPIUni:
+        cmakeset(fd,'PETSC_HAVE_MPIUNI')
+      for pkg in self.framework.packages:
+        if pkg.useddirectly:
+          cmakeset(fd,'PETSC_HAVE_' + pkg.PACKAGE.replace('-','_'))
+        for pair in pkg.defines.items():
+          if pair[0].startswith('HAVE_') and pair[1]:
+            cmakeset(fd, self.framework.getFullDefineName(pkg, pair[0]), pair[1])
+      for name,val in self.functions.defines.items():
+        cmakeset(fd,'PETSC_'+name,val)
+      for dct in [self.defines, self.libraryoptions.defines]:
+        for k,v in dct.items():
+          if k.startswith('USE_'):
+            cmakeset(fd,'PETSC_' + k, v)
+      cmakeset(fd,'PETSC_USE_COMPLEX', self.scalartypes.scalartype == 'complex')
+      cmakeset(fd,'PETSC_USE_REAL_' + self.scalartypes.precision.upper())
+      cmakeset(fd,'PETSC_CLANGUAGE_'+self.languages.clanguage)
+      if hasattr(self.compilers, 'FC'):
+        cmakeset(fd,'PETSC_HAVE_FORTRAN')
+        if self.fortran.fortranIsF90:
+          cmakeset(fd,'PETSC_USING_F90')
+        if self.fortran.fortranIsF2003:
+          cmakeset(fd,'PETSC_USING_F2003')
+      if hasattr(self.compilers, 'CXX'):
+        cmakeset(fd,'PETSC_HAVE_CXX')
+      if self.sharedlibraries.useShared:
+        cmakeset(fd,'BUILD_SHARED_LIBS')
+    def writeBuildFlags(fd):
+      def extendby(lib):
+        libs = ensurelist(lib)
+        lib_paths.extend(map(libpath,libs))
+        lib_libs.extend(map(cleanlib,libs))
+      lib_paths = []
+      lib_libs  = []
+      includes  = []
+      libvars   = []
+      for pkg in self.framework.packages:
+        if pkg.linkedbypetsc:
+          extendby(pkg.lib)
+          uniqextend(includes,pkg.include)
+      extendby(self.libraries.math)
+      extendby(self.libraries.rt)
+      extendby(self.compilers.flibs)
+      extendby(self.compilers.cxxlibs)
+      extendby(self.compilers.LIBS.split())
+      for libname in nublast(lib_libs):
+        libvar = 'PETSC_' + libname.upper() + '_LIB'
+        addpath = ''
+        for lpath in nublast(lib_paths):
+          addpath += '"' + str(lpath) + '" '
+        fd.write('find_library (' + libvar + ' ' + libname + ' HINTS ' + addpath + ')\n')
+        libvars.append(libvar)
+      fd.write('mark_as_advanced (' + ' '.join(libvars) + ')\n')
+      fd.write('set (PETSC_PACKAGE_LIBS ' + ' '.join(map(cmakeexpand,libvars)) + ')\n')
+      includes = list(filter(notstandardinclude,includes))
+      fd.write('set (PETSC_PACKAGE_INCLUDES ' + ' '.join(map(lambda i: '"'+i+'"',includes)) + ')\n')
+    fd = open(os.path.join(self.arch.arch,'lib','petsc','conf','PETScBuildInternal.cmake'), 'w')
+    writeMacroDefinitions(fd)
+    writeBuildFlags(fd)
+    fd.close()
+    return
+
