Binary files Silo-4.11.1-orig/.git/index and Silo-4.11.1/.git/index differ
diff --color -ruN Silo-4.11.1-orig/src/hdf5_drv/H5FDsilo.c Silo-4.11.1/src/hdf5_drv/H5FDsilo.c
--- Silo-4.11.1-orig/src/hdf5_drv/H5FDsilo.c	2025-09-20 08:52:06
+++ Silo-4.11.1/src/hdf5_drv/H5FDsilo.c	2025-09-20 08:59:34
@@ -243,6 +243,12 @@
     return tmp;
 }
 
+#if HDF5_VERSION_GE(1,10,8)
+#define H5EPR_SEMI_COLON ;
+#else
+#define H5EPR_SEMI_COLON
+#endif
+
 #ifdef H5_HAVE_SNPRINTF
 #define H5E_PUSH_HELPER(Func,Cls,Maj,Min,Msg,Ret,Errno)			\
 {									\
@@ -251,13 +257,13 @@
         snprintf(msg, sizeof(msg), Msg "(errno=%d, \"%s\")",	        \
             Errno, strerror(Errno));					\
     ret_value = Ret;							\
-    H5Epush_ret(Func, Cls, Maj, Min, msg, Ret) ;                        \
+    H5Epush_ret(Func, Cls, Maj, Min, msg, Ret) H5EPR_SEMI_COLON          \
 }
 #else
 #define H5E_PUSH_HELPER(Func,Cls,Maj,Min,Msg,Ret,Errno)			\
 {									\
     ret_value = Ret;							\
-    H5Epush_ret(Func, Cls, Maj, Min, Msg, Ret) ;		        \
+    H5Epush_ret(Func, Cls, Maj, Min, Msg, Ret) H5EPR_SEMI_COLON		        \
 }
 #endif
 
@@ -355,7 +361,7 @@
     hsize_t minroff, maxroff;
 } silo_vfd_block_t;
 
-typedef struct silo_vfd_pair_t_ 
+typedef struct silo_vfd_pair_t_
 {
     int i;
     hsize_t id;
@@ -739,7 +745,7 @@
         else
             return mid;
     }
-    return -1; 
+    return -1;
 }
 
 static int find_block_to_preempt(H5FD_silo_t *file)
@@ -829,7 +835,7 @@
     block = &(file->block_list[blidx]);
 
     HDassert(block->buf);
-    
+
     HDassert((hsize_t)off+size<=file->block_size);
     memcpy(dstbuf, (char*)block->buf+off, size);
 
@@ -1067,7 +1073,7 @@
     return 0;
 }
 
-/* blidx refers to the block in the list JUST BEFORE the block we're inserting */ 
+/* blidx refers to the block in the list JUST BEFORE the block we're inserting */
 /* a -1 implies it comes JUST BEFORE the 0th block */
 static herr_t insert_block_by_index(H5FD_silo_t *file, int blidx)
 {
@@ -1097,7 +1103,7 @@
     silo_vfd_block_t *b;
     int blidx = find_block_by_id(file, id, CLOSEST);
 
-    /* blidx refers to the block in the list JUST BEFORE the block we're inserting */ 
+    /* blidx refers to the block in the list JUST BEFORE the block we're inserting */
     insert_block_by_index(file, blidx);
 
     /* update blidx to point to the block we're inserting */
@@ -1129,7 +1135,7 @@
 static herr_t free_block_by_index(H5FD_silo_t *file, int blidx)
 {
     silo_vfd_block_t *b;
-    
+
     HDassert(blidx<file->num_blocks);
 
     b = &(file->block_list[blidx]);
@@ -1224,7 +1230,7 @@
 herr_t
 H5Pset_fapl_silo(hid_t fapl_id)
 {
-    static const char *func = "H5FDset_fapl_silo"; 
+    static const char *func = "H5FDset_fapl_silo";
     herr_t ret_value = 0;
     hsize_t default_block_size = H5FD_SILO_DEFAULT_BLOCK_SIZE;
     int default_block_count = H5FD_SILO_DEFAULT_BLOCK_COUNT;
@@ -1373,7 +1379,7 @@
     memcpy(p, &file->block_size, sizeof(hsize_t));
     if (H5Tconvert(H5T_NATIVE_HSIZE, H5T_STD_U64LE, 1, buf+8, NULL, H5P_DEFAULT)<0)
     {
-        H5Epush_ret(func, H5E_ERR_CLS, H5E_DATATYPE, H5E_CANTCONVERT, "can't convert superblock info", -1) ;
+        H5Epush_ret(func, H5E_ERR_CLS, H5E_DATATYPE, H5E_CANTCONVERT, "can't convert superblock info", -1) H5EPR_SEMI_COLON
     }
 
     return 0;
@@ -1403,7 +1409,7 @@
     /* Make sure the name/version number is correct */
     if (strcmp(name, "LLNLsilo"))
     {
-        H5Epush_ret(func, H5E_ERR_CLS, H5E_FILE, H5E_BADVALUE, "invalid silo superblock", -1) ;
+        H5Epush_ret(func, H5E_ERR_CLS, H5E_FILE, H5E_BADVALUE, "invalid silo superblock", -1) H5EPR_SEMI_COLON
     }
 
     buf += 8;
@@ -1412,7 +1418,7 @@
     memcpy(x, buf, 8);
     if (H5Tconvert(H5T_STD_U64LE, H5T_NATIVE_HSIZE, 1, x, NULL, H5P_DEFAULT)<0)
     {
-        H5Epush_ret(func, H5E_ERR_CLS, H5E_DATATYPE, H5E_CANTCONVERT, "can't convert superblock info", -1) ;
+        H5Epush_ret(func, H5E_ERR_CLS, H5E_DATATYPE, H5E_CANTCONVERT, "can't convert superblock info", -1) H5EPR_SEMI_COLON
     }
     ap = (hsize_t*)x;
     /*file->block_size = *ap; ignore stored value for now */
@@ -1621,7 +1627,7 @@
         for (i = 0; i < file->num_blocks; i++)
         {
             sorted_pairs[i].i = i;
-            sorted_pairs[i].id = file->block_list[i].id; 
+            sorted_pairs[i].id = file->block_list[i].id;
         }
         qsort(sorted_pairs, file->num_blocks, sizeof(silo_vfd_pair_t), compare_silo_vfd_pairs);
 
@@ -1680,7 +1686,7 @@
         fprintf(logf, "hot blocks...\n");
         for (i = 0; i < file->stats.num_hot_blocks; i++)
         {
-            silo_vfd_hot_block_stats_t *hb = &(file->stats.hot_block_list[i]); 
+            silo_vfd_hot_block_stats_t *hb = &(file->stats.hot_block_list[i]);
             fprintf(logf,"    %8llu: %4s (%f), #writes=%8llu, #reads=%8llu\n",
                 hb->id, (hb->raw_frac>0.5?"raw":"meta"), hb->raw_frac, hb->num_block_writes+1, hb->num_block_reads+1);
         }
@@ -2099,16 +2105,16 @@
         return 0;
 
     rb = relevant_blocks(file->block_size, addr, size);
-    blidx = -1; 
+    blidx = -1;
     bl = file->block_list;
     bufoff = 0;
     for (id = rb.id0; id <= rb.id1; id++)
     {
         /* look for the block in the list */
         if (blidx < 0 || blidx >= file->num_blocks-1)
-            blidx = find_block_by_id(file, id, EXACT); 
+            blidx = find_block_by_id(file, id, EXACT);
         else if (bl[blidx+1].id != id)
-            blidx = find_block_by_id(file, id, EXACT); 
+            blidx = find_block_by_id(file, id, EXACT);
         else
             blidx++;
 
@@ -2230,16 +2236,16 @@
         return 0;
 
     rb = relevant_blocks(file->block_size, addr, size);
-    blidx = -1; 
+    blidx = -1;
     bl = file->block_list;
     bufoff = 0;
     for (id = rb.id0; id <= rb.id1; id++)
     {
         /* look for the block in the list */
         if (blidx < 0 || blidx >= file->num_blocks-1)
-            blidx = find_block_by_id(file, id, EXACT); 
+            blidx = find_block_by_id(file, id, EXACT);
         else if (bl[blidx+1].id != id)
-            blidx = find_block_by_id(file, id, EXACT); 
+            blidx = find_block_by_id(file, id, EXACT);
         else
             blidx++;
 
@@ -2357,7 +2363,7 @@
             H5E_PUSH_HELPER(func, H5E_ERR_CLS, H5E_IO, H5E_SEEKERROR, "unable to extend file properly", -1, -1)
 #else /* _WIN32 */
 #ifdef H5_VMS
-        /* Reset seek offset to the beginning of the file, so that the file isn't 
+        /* Reset seek offset to the beginning of the file, so that the file isn't
          * re-extended later.  This may happen on Open VMS. */
         if(-1 == HDlseek(file->fd, (file_offset_t)0, SEEK_SET))
             H5E_PUSH_HELPER(func, H5E_ERR_CLS, H5E_IO, H5E_SEEKERROR, "HDlseek failed", -1, errno)
