diff --git a/packages/ifpack2/src/Ifpack2_Hypre_decl.hpp b/packages/ifpack2/src/Ifpack2_Hypre_decl.hpp
index d2d3c0abc27..81c5c1884d3 100644
--- a/packages/ifpack2/src/Ifpack2_Hypre_decl.hpp
+++ b/packages/ifpack2/src/Ifpack2_Hypre_decl.hpp
@@ -122,6 +122,10 @@ class Hypre:
                                                                        typename MatrixType::node_type> >
 {
 public:
+  
+  //! Copies matrix data from Tpetra matrix to Hypre matrix.
+  int CopyTpetraToHypre();
+
 public:
   //! \name Typedefs
   //@{
@@ -555,9 +559,6 @@ private:
   //! Create the Preconditioner.
   int CreatePrecond();
 
-  //! Copies matrix data from Tpetra matrix to Hypre matrix.
-  int CopyTpetraToHypre();
-
   //! Add a function to be called in Compute()
   int AddFunToList(Teuchos::RCP<FunctionParameter> NewFun);
 
diff --git a/packages/ifpack2/src/Ifpack2_Hypre_def.hpp b/packages/ifpack2/src/Ifpack2_Hypre_def.hpp
index e64942b407e..a0d8090bdd2 100644
--- a/packages/ifpack2/src/Ifpack2_Hypre_def.hpp
+++ b/packages/ifpack2/src/Ifpack2_Hypre_def.hpp
@@ -890,23 +890,28 @@ int Hypre<MatrixType>::CopyTpetraToHypre(){
   if(Matrix.is_null()) 
     throw std::runtime_error("Hypre<MatrixType>: Unsupported matrix configuration: Tpetra::CrsMatrix required");
 
-  std::vector<GO> new_indices(Matrix->getNodeMaxNumRowEntries());
-  for(LO i = 0; i < (LO) Matrix->getNodeNumRows(); i++){
-    Teuchos::ArrayView<const SC> values;
-    Teuchos::ArrayView<const LO> indices;
-    Matrix->getLocalRowView(i, indices, values);
-    for(LO j = 0; j < (LO)indices.size(); j++){
-      new_indices[j] = GloballyContiguousColMap_->getGlobalElement(indices[j]);
-    }
-    GO GlobalRow[1];
-    GO numEntries = (GO) indices.size();
-    GlobalRow[0] = GloballyContiguousRowMap_->getGlobalElement(i);    
-    IFPACK2_CHK_ERR(HYPRE_IJMatrixSetValues(HypreA_, 1, &numEntries, GlobalRow, new_indices.data(), values.getRawPtr()));
+  LO nrows = Matrix->getNodeNumRows();
+  Kokkos::View<LO*,Kokkos::DefaultExecutionSpace> colsperrow("ColsPerRow",nrows);
+  auto rowPtrs = Matrix->getCrsGraph()->getLocalGraph().row_map;
+  Kokkos::parallel_for(nrows,
+    KOKKOS_LAMBDA(const int i){
+      colsperrow(i) = rowPtrs[i+1]-rowPtrs[i];
+  });
+  auto rowindices = Matrix->getRowMap()->getMyGlobalIndices();
+  auto values = Matrix->getLocalValuesView();
+  auto colindices = Matrix->getCrsGraph()->getLocalGraph().entries;
+  Kokkos::View<GO*,Kokkos::DefaultExecutionSpace>
+    new_colindices("nci",colindices.size());
+  for(int i = 0 ; i < colindices.size(); ++i){
+    new_colindices[i] = GloballyContiguousColMap_->getGlobalElement(colindices[i]);
   }
+
+  IFPACK2_CHK_ERR(HYPRE_IJMatrixSetValues(HypreA_,nrows,colsperrow.data(),
+                                         rowindices.data(),new_colindices.data(),values.data()));
   IFPACK2_CHK_ERR(HYPRE_IJMatrixAssemble(HypreA_));
   IFPACK2_CHK_ERR(HYPRE_IJMatrixGetObject(HypreA_, (void**)&ParMatrix_));
   if (Dump_)
-    HYPRE_ParCSRMatrixPrint(ParMatrix_,"A.mat");
+    IFPACK2_CHK_ERR(HYPRE_ParCSRMatrixPrint(ParMatrix_,"A.mat"));
   return 0;
 } //CopyTpetraToHypre()
 
